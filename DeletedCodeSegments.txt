Ball#getBoundsTop(){
		/*Area areaTop = new Area(boundsTransf);
		Area areaTopCut = new Area(new Rectangle((int)boundsTransf.getBounds().getX(), (int)(boundsTransf.getBounds().getY()+boundsTransf.getBounds().getHeight()/10),
				(int)boundsTransf.getBounds().getWidth(), (int)boundsTransf.getBounds().getHeight()));
		areaTop.subtract(areaTopCut);*/
}

Ball#getBoundsBot(){
		/*Area areaBot = new Area(boundsTransf);
		Area areaBotCut = new Area(new Rectangle((int)boundsTransf.getBounds().getX(), (int)(boundsTransf.getBounds().getY()),
				(int)boundsTransf.getBounds().getWidth(), (int)boundsTransf.getBounds().getHeight()*9/10));
		areaBot.subtract(areaBotCut);*/
}

Ball#getBoundsLeft(){
		/*Area areaLeft = new Area(boundsTransf);
		Area areaLeftCut = new Area(new Rectangle((int)(boundsTransf.getBounds().getX()+boundsTransf.getBounds().getWidth()/10), (int)(boundsTransf.getBounds().getY()),
				(int)boundsTransf.getBounds().getWidth(), (int)boundsTransf.getBounds().getHeight()));
		areaLeft.subtract(areaLeftCut);*/
}

Ball#getBoundsRight(){
		/*Area areaRight = new Area(boundsTransf);
		Area areaRightCut = new Area(new Rectangle((int)(boundsTransf.getBounds().getX()), (int)(boundsTransf.getBounds().getY()),
				(int)boundsTransf.getBounds().getWidth()*9/10, (int)boundsTransf.getBounds().getHeight()));
		areaRight.subtract(areaRightCut);*/
}

Ball#collision(){
		//////////////////////////////////////
		// après if(!contact.isEmpty()){... //
		//////////////////////////////////////

		/*Area total = getBoundsBot();
		total.intersect(objectTemp.getBounds());
		if(!total.isEmpty()) {
			velY = 0;
			velX = 0;
			y = objectTemp.getY()-getHeight();
			falling = false;
		
			System.out.println("hit bot");
		}
		
		total = getBoundsTop();
		total.intersect(objectTemp.getBounds());
		if(!total.isEmpty()) {
			velY = 0;
			velX = 0;
			deltaT = 0;
			y = objectTemp.getY()+objectTemp.getHeight();
			System.out.println("hit top");
		}
		
		total = getBoundsLeft();
		total.intersect(objectTemp.getBounds());
		if(!total.isEmpty()) {
			velX = 0;
			x = objectTemp.getX()+objectTemp.getWidth();
			System.out.println("hit left");
		}
		
		total = getBoundsRight();
		total.intersect(objectTemp.getBounds());
		if(!total.isEmpty()) {
			velX = 0;
			x = objectTemp.getX()-getWidth();
			System.out.println("hit right");
		}*/
}

CLASSE TESTCOLLISIONBALL
package drawable.gameobject;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.event.EventListenerList;

import util.BallListener;
import util.BufferedImageLoader;
import util.ScoreListener;
import application.Camera;
import application.GamePanel;
import drawable.util.Vector2D;
/**
 * Cette classe n'est en ce moment pas utilisée. Elle servira comme classe pour tester une nouvelle approche de collision.
 * Classe qui crée la balle.
 * 
 * @author Alexandre Hua
 * @author Olivier St-Jean
 * @version 2.0.0
 */
public class TestCollisionBall extends GameObject{
	private static BufferedImage img = new BufferedImageLoader().loadImage("/game/ball.png");
	private static final double G = 9.8;
	private static final double DT = 1.0/60.0;
	private final double COR_GRASS = 0.42328;
	
	private Handler handler;
	private final EventListenerList REGISTERED_LISTENERS = new EventListenerList();
	
	private Rectangle.Double bounds;
	private double angle = 0;
	//private double deltaT = 0;
	//private double yBefore=0, yNow=0;
	private Shape boundsTransf;
	private AffineTransform worldMatrix;
	private boolean falling = true;
	
	private double mass;
	private Vector2D momentum;
	private Vector2D forceGravity;
	private double timeElapsed;
	
	private boolean hitByBat = false;
	private boolean landed = false;
	private Camera cam;
	
	/**
	 * <b>Constructeur</b>
	 * <p>Créer la balle.</p>
	 * @param x Position en x de la balle.
	 * @param y Position en y de la balle.
	 * @param diameter Diamètre de la balle.
	 * @param worldMatrix Matrice monde vers composant.
	 * @param handler Gestionnaire des objets de jeu.
	 * @param cam la caméra fixée à la balle
	 */
	public TestCollisionBall(double x, double y, double diameter, AffineTransform worldMatrix, Handler handler, Camera cam) {
		super(x, y, diameter, diameter, worldMatrix);
		this.bounds = new Rectangle.Double(x, y, getWidth(), getHeight());
		this.worldMatrix = worldMatrix;
		this.handler = handler;
		this.mass = 0.150; //150g
		//this.momentum = new Vector2D(mass*getVelX(), mass*getVelY());
		this.cam = cam;
	}

	/**
	 * Mise à jour des différents paramètres de la balle.
	 * @see TestCollisionBall#evalForces()
	 * @see TestCollisionBall#collision()
	 */
	@Override
	public void update() {
		setX(getX() + getVelX()*DT);
		setVelY(getVelY() + G*DT);
		setY(getY() + getVelY()*DT);
		//momentum.set(mass*getVelX(), mass*getVelY());
		//System.out.println("VelX: " + velX + " velY: " + velY);
		//System.out.println(momentum);
		/*if(falling) {
			yBefore = yNow;
			//yNow = 50*deltaT - 0.5*9.8*deltaT*deltaT;
			yNow = 0.5 * G * deltaT*deltaT;
			//velY += yNow-yBefore;
		}*/
		//deltaT += DT;
		//y += velY/60;
		bounds = new Rectangle.Double(getX(), getY(), getWidth(), getHeight());
		angle += 0.05;
		collisionTest();
		timeElapsed += DT;
		if(timeElapsed >= 10){
			for(BallListener listener : REGISTERED_LISTENERS.getListeners(BallListener.class)){
				listener.resetBall();
			}
		}
	}

	/**
	 * Dessiner la balle.
	 * @param g2d ({@link Graphics2D}) Le contexte graphique sur lequel dessiner la balle.
	 * @see AffineTransform#createTransformedShape(Shape)
	 */
	@Override
	public void render(Graphics2D g2d) {
		boundsTransf = worldMatrix.createTransformedShape(bounds);
		//System.out.println(boundsTransf.getBounds().getY());
		g2d.rotate(angle, boundsTransf.getBounds().getX()+boundsTransf.getBounds().getWidth()/2, boundsTransf.getBounds().getY()+boundsTransf.getBounds().getHeight()/2);
		g2d.setColor(Color.BLACK);
		g2d.fill(boundsTransf);
		//g2d.drawImage(img, (int)boundsTransf.getBounds().getX(), (int)boundsTransf.getBounds().getY(), (int)boundsTransf.getBounds().getWidth(), (int)boundsTransf.getBounds().getHeight(), null);
		/*g2d.setColor(Color.WHITE);
		g2d.fill(worldMatrix.createTransformedShape(bounds));
		g2d.setColor(Color.RED);
		Stroke origStroke = g2d.getStroke();
		g2d.setStroke(new BasicStroke(5));
		g2d.draw(worldMatrix.createTransformedShape(curveL));
		g2d.draw(worldMatrix.createTransformedShape(curveR));
		g2d.setStroke(origStroke);*/
		
		//zone de bounds des 4 coins
		g2d.rotate(-angle, boundsTransf.getBounds().getX()+boundsTransf.getBounds().getWidth()/2, boundsTransf.getBounds().getY()+boundsTransf.getBounds().getHeight()/2);
		g2d.setColor(Color.GREEN);
		g2d.fill(getBoundsTop());
		g2d.fill(getBoundsBot());
		g2d.fill(getBoundsLeft());
		g2d.fill(getBoundsRight());
		//g2d.setColor(Color.YELLOW);
		//g2d.fill(getNextBounds());
	}
	
	/**
	 * Retourner la zone de collision de la balle.
	 * @return L'aire de la forme en monde vers composant.
	 */
	public Area getBounds() {
		return new Area(boundsTransf);
	}
	
	/**
	 * Prédire la position de la prochaine zone de collision de la balle.
	 * @return La prochaine aire de la forme en monde vers composant.
	 */
	private Area getNextBounds() {
		/*double yBeforeTemp = yBefore;
		double yNowTemp = yNow;
		double velYTemp = velY;
		if(falling) {
			yBeforeTemp = yNow;
			yNowTemp = 0.5*G*(deltaT+DT)*(deltaT+DT);
			velYTemp += yNowTemp-yBeforeTemp;
		}*/
		double nextVelY = getVelY()+G*DT;
		double nextY = getY()+nextVelY*DT;
		double nextX = getX()+getVelX()*DT;
		//return new Area(worldMatrix.createTransformedShape(new Ellipse2D.Double(x+velX/60, y+velYTemp/60, width, height)));
		return new Area(worldMatrix.createTransformedShape(new Ellipse2D.Double(nextX, nextY, getWidth(), getHeight())));
	}

	/**
	 * Retourner la zone de collision la plus proche de l'objet collisionné parmis les 4 zones de collision directionnels de la balle.
	 * @param targetBounds Objet collsionné avec la balle.
	 * @param areas Les 4 coins de zone de collision de la balle.
	 * @return Une des 4 zones de collsion de la balle.
	 */
	private Area getNearestAreaToObject(Area targetBounds, Area ...areas) {
		ArrayList<Double> distance = new ArrayList<Double>();
		for(int i = 0; i<areas.length; i++) {
			double distanceX = Math.abs(targetBounds.getBounds().getX()+targetBounds.getBounds().getWidth()/2 - (areas[i].getBounds().getX()+areas[i].getBounds().getWidth()/2));
			double distanceY = Math.abs(targetBounds.getBounds().getY()+targetBounds.getBounds().getHeight()/2 - (areas[i].getBounds().getY()+areas[i].getBounds().getHeight()/2));
			distance.add(Math.sqrt(Math.pow(distanceX, 2) +	Math.pow(distanceY, 2)));
		}
		
		double smallest = Integer.MAX_VALUE;
		for(int i = 0; i < distance.size(); i++) {
			if(smallest > distance.get(i)) {
				smallest = distance.get(i);
			}
		}
		return areas[distance.indexOf(smallest)];
	}
	
	/**
	 * Retourner la zone de collision du côté haut de la balle.	
	 * @return La zone de collision du côté haut de la balle.
	 */
	private Area getBoundsTop() {
		int areaX 		= (int)boundsTransf.getBounds().getX()+(int)boundsTransf.getBounds().getWidth()/2-(int)boundsTransf.getBounds().getWidth()/(2*10);
		int areaY 		= (int)(boundsTransf.getBounds().getY());
		int areaWidth 	= (int)boundsTransf.getBounds().getWidth()/10;
		int areaHeight 	= (int)boundsTransf.getBounds().getHeight()/10;
		Area areaTop = new Area(new Rectangle(areaX, areaY, areaWidth, areaHeight));
		return areaTop;
	}

	/**
	 * Retourner la zone de collision du côté bas de la balle.
	 * @return La zone de collision du côté bas de la balle.
	 */
	private Area getBoundsBot() {
		int areaX 		= (int)boundsTransf.getBounds().getX()+(int)boundsTransf.getBounds().getWidth()/2-(int)boundsTransf.getBounds().getWidth()/(2*10);
		int areaY 		= (int)(boundsTransf.getBounds().getY()+boundsTransf.getBounds().getHeight()-(int)boundsTransf.getBounds().getHeight()/10);
		int areaWidth 	= (int)boundsTransf.getBounds().getWidth()/10;
		int areaHeight 	= (int)boundsTransf.getBounds().getHeight()/10;
		Area areaBot = new Area(new Rectangle(areaX, areaY, areaWidth, areaHeight));
		return areaBot;
	}

	/**
	 * Retourner la zone de collision du côté gauche de la balle.	
	 * @return La zone de collision du côté gauche de la balle.
	 */
	private Area getBoundsLeft() {
		int areaX 		= (int)boundsTransf.getBounds().getX();
		int areaY 		= (int)(boundsTransf.getBounds().getY()+boundsTransf.getBounds().getHeight()/2-(int)boundsTransf.getBounds().getHeight()/(2*10));
		int areaWidth 	= (int)boundsTransf.getBounds().getWidth()/10;
		int areaHeight 	= (int)boundsTransf.getBounds().getHeight()/10;
		Area areaLeft = new Area(new Rectangle(areaX, areaY, areaWidth, areaHeight));
		return areaLeft;
	}

	/**
	 * Retourner la zone de collision du côté droit de la balle.	
	 * @return La zone de collision du côté droit de la balle.
	 */
	private Area getBoundsRight() {
		int areaX = (int)boundsTransf.getBounds().getX()+(int)boundsTransf.getBounds().getWidth()-(int)boundsTransf.getBounds().getWidth()/10;
		int areaY = (int)(boundsTransf.getBounds().getY()+boundsTransf.getBounds().getHeight()/2-(int)boundsTransf.getBounds().getHeight()/(2*10));
		int areaWidth = (int)boundsTransf.getBounds().getWidth()/10;
		int areaHeight = (int)boundsTransf.getBounds().getHeight()/10;
		Area areaRight = new Area(new Rectangle(areaX, areaY, areaWidth, areaHeight));
		return areaRight;
	}
	
	/**
	 * Détecter s'il y a collision et gérer la collision selon le côté qui a touché en la faisant rebondir la balle.
	 * @see TestCollisionBall#getNextBounds()
	 * @see TestCollisionBall#getNearestAreaToObject(Area, Area...)
	 * @see TestCollisionBall#getBoundsBot()
	 * @see TestCollisionBall#getBoundsTop()
	 * @see TestCollisionBall#getBoundsLeft()
	 * @see TestCollisionBall#getBoundsRight()
	 * @see Area#intersect(Area)
	 * @see Area#isEmpty()
	 */
	private void collision() {
		for(int i = 0; i < handler.getObjects().size(); i++) {
			GameObject objectTemp = null;
			try{
				objectTemp = handler.getObjects().get(i);
			}catch(NullPointerException e){
				System.out.println(e.getLocalizedMessage());
			}
			if(objectTemp != null && (objectTemp instanceof Platform || objectTemp instanceof Obstacles || (objectTemp instanceof BaseBallBat && !hitByBat))) {
				Area contact = getNextBounds();
				contact.intersect(objectTemp.getBounds());
				if(!contact.isEmpty()) {
					if(objectTemp instanceof BaseBallBat) { //le baton de baseball ne peut frapper la balle qu'une seule fois
						cam.setPos(getX()*worldMatrix.getScaleX());
						hitByBat = true;
					}
					
					//System.out.println("hit something");
					Area nearestArea = getNearestAreaToObject(objectTemp.getBounds(), getBoundsBot(), getBoundsTop(), getBoundsLeft(), getBoundsRight());

					//test pour savoir si la balle a attéri sur le sol et a fini de rebondir
					//si test est vrai, enlever la gravité et mettre la vélocité Y à 0
					/*if(Math.abs(velY) < 2 && y > GamePanel.HEIGHT/worldMatrix.getScaleY()-Platform.SIZE-getHeight()-1) {
						falling = false;
						velY=0;
					} else {
						falling = true;
					}*/

					if(nearestArea.equals(getBoundsBot())) {
						if(falling) {
							if(objectTemp instanceof BaseBallBat) {
								BaseBallBat batTemp = (BaseBallBat)objectTemp;
								if(getVelY()/Math.abs(getVelY()) == batTemp.getVelY()/Math.abs(batTemp.getVelY())) {
									setVelY(getVelY() + batTemp.getVelY()*20);
								} else {
									setVelY(-getVelY() + batTemp.getVelY()*20);
								}
							} else {
								setVelY(-getVelY()*COR_GRASS);
							}
						} else {
							setY(getY() - 1*getWorldMatrix().getScaleY());
						}
						setY(objectTemp.getY() - getHeight());
						
						//lorsque la balle touche le sol pour la première fois après avoir été frappée par la batte, le point est entré
						if(getY() > GamePanel.HEIGHT/getWorldMatrix().getScaleY()-Platform.SIZE-getHeight()-1 && !landed && hitByBat) {
							for(ScoreListener listener : REGISTERED_LISTENERS.getListeners(ScoreListener.class)){
								listener.getScore((int)getX());
							}
							landed = true;
						}

						//System.out.println("hit bot");

					}

					if(nearestArea.equals(getBoundsTop())) {
						if(objectTemp instanceof BaseBallBat) {
							BaseBallBat batTemp = (BaseBallBat)objectTemp;
							if(getVelY()/Math.abs(getVelY()) == batTemp.getVelY()/Math.abs(batTemp.getVelY())) {
								setVelY(getVelY() + batTemp.getVelY()*20);
							} else {
								setVelY(-getVelY() + batTemp.getVelY()*20);
							}
						} else {
							setVelY(-getVelY()*COR_GRASS);
						}
						setY(objectTemp.getY() + objectTemp.getHeight());
						//System.out.println("hit top");
					}

					if(nearestArea.equals(getBoundsLeft())) {
						if(objectTemp instanceof BaseBallBat) {
							BaseBallBat batTemp = (BaseBallBat)objectTemp;
							if(getVelX()/Math.abs(getVelX()) == batTemp.getVelX()/Math.abs(batTemp.getVelX())) {
								setVelX(getVelX() + batTemp.getVelX()*20);
							} else {
								setVelX(-getVelX() + batTemp.getVelX()*20);
							}
						} else {
							setVelX(-getVelX()*COR_GRASS);
						}
						setX(objectTemp.getX() + objectTemp.getWidth());
						//System.out.println("hit left");
					}

					if(nearestArea.equals(getBoundsRight())) {
						if(objectTemp instanceof BaseBallBat) {
							BaseBallBat batTemp = (BaseBallBat)objectTemp;
							if(getVelX()/Math.abs(getVelX()) == batTemp.getVelX()/Math.abs(batTemp.getVelX())) {
								setVelX(getVelX() + batTemp.getVelX()*20);
							} else {
								setVelX(-getVelX() + batTemp.getVelX()*20);
							}
						} else {
							setVelX(-getVelX()*COR_GRASS);
						}
						setX(objectTemp.getX() - getWidth());
						//System.out.println("hit right");
					}
				}
			}
		}
	}
	
	public void collisionTest() {
		
	}
	
	/**
	 * Permet d'ajouter un écouteur pour la balle.
	 * @param l L'écouteur de balle.
	 */
	public void addBallListener(BallListener l){
		REGISTERED_LISTENERS.add(BallListener.class, l);
	}
	
	public void addScoreListener(ScoreListener l){
		REGISTERED_LISTENERS.add(ScoreListener.class, l);
	}

}
